-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Generate nix sources expr for the latest version of packages
--   
--   Please see <a>README</a>
@package nvfetcher
@version 0.6.2.0


module NvFetcher.Config

-- | Nvfetcher configuration
data Config
Config :: ShakeOptions -> FilePath -> Rules () -> Action () -> Action () -> Int -> Maybe String -> Bool -> Maybe FilePath -> Config
[shakeConfig] :: Config -> ShakeOptions
[buildDir] :: Config -> FilePath
[customRules] :: Config -> Rules ()
[actionAfterBuild] :: Config -> Action ()
[actionAfterClean] :: Config -> Action ()
[retry] :: Config -> Int
[filterRegex] :: Config -> Maybe String
[cacheNvchecker] :: Config -> Bool

-- | Absolute path
[keyfile] :: Config -> Maybe FilePath
instance Data.Default.Class.Default NvFetcher.Config.Config


-- | Types used in this program.
module NvFetcher.Types

-- | Package version
newtype Version
Version :: Text -> Version

-- | Check sum, sha256, sri or base32, etc.
newtype Checksum
Checksum :: Text -> Checksum

-- | Digest of a (Docker) container
newtype ContainerDigest
ContainerDigest :: Text -> ContainerDigest

-- | Git branch (<a>Nothing</a>: master)
newtype Branch
Branch :: Maybe Text -> Branch

-- | Nix expression
type NixExpr = Text

-- | Version change of a package
--   
--   <pre>
--   &gt;&gt;&gt; VersionChange "foo" Nothing "2.3.3"
--   foo: ∅ → 2.3.3
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; VersionChange "bar" (Just "2.2.2") "2.3.3"
--   bar: 2.2.2 → 2.3.3
--   </pre>
data VersionChange
VersionChange :: PackageName -> Maybe Version -> Version -> VersionChange
[vcName] :: VersionChange -> PackageName
[vcOld] :: VersionChange -> Maybe Version
[vcNew] :: VersionChange -> Version

-- | Decorate a rule's key with <a>PackageKey</a>
newtype WithPackageKey k
WithPackageKey :: (k, PackageKey) -> WithPackageKey k
data VersionSortMethod
ParseVersion :: VersionSortMethod
Vercmp :: VersionSortMethod

-- | Filter-like configuration for some version sources. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#list-options</a>
--   for details.
data ListOptions
ListOptions :: Maybe Text -> Maybe Text -> Maybe VersionSortMethod -> Maybe Text -> ListOptions
[_includeRegex] :: ListOptions -> Maybe Text
[_excludeRegex] :: ListOptions -> Maybe Text
[_sortVersionKey] :: ListOptions -> Maybe VersionSortMethod
[_ignored] :: ListOptions -> Maybe Text

-- | Upstream version source for nvchecker to check
data VersionSource
GitHubRelease :: Text -> Text -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
GitHubTag :: Text -> Text -> ListOptions -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
Git :: Text -> Branch -> VersionSource
[_vurl] :: VersionSource -> Text
[_vbranch] :: VersionSource -> Branch
Pypi :: Text -> VersionSource
[_pypi] :: VersionSource -> Text
ArchLinux :: Text -> VersionSource
[_archpkg] :: VersionSource -> Text
Aur :: Text -> VersionSource
[_aur] :: VersionSource -> Text
Manual :: Text -> VersionSource
[_manual] :: VersionSource -> Text
Repology :: Text -> Text -> VersionSource
[_repology] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
Webpage :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
HttpHeader :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
OpenVsx :: Text -> Text -> VersionSource
[_ovPublisher] :: VersionSource -> Text
[_ovExtName] :: VersionSource -> Text
VscodeMarketplace :: Text -> Text -> VersionSource
[_vsmPublisher] :: VersionSource -> Text
[_vsmExtName] :: VersionSource -> Text
Cmd :: Text -> VersionSource
[_vcmd] :: VersionSource -> Text
Container :: Text -> ListOptions -> VersionSource
[_vcontainer] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions

-- | The result of nvchecker rule
data NvcheckerResult
NvcheckerResult :: Version -> Maybe Version -> Bool -> NvcheckerResult
[nvNow] :: NvcheckerResult -> Version

-- | last result of this nvchecker rule TODO: consider removing this field
[nvOld] :: NvcheckerResult -> Maybe Version

-- | stale means even <a>nvNow</a> comes from json file (last run) and we
--   actually didn't run nvchecker this time. <a>nvOld</a> will be
--   <a>Nothing</a> in this case.
[nvStale] :: NvcheckerResult -> Bool

-- | Parsed JSON output from nvchecker
data NvcheckerRaw
NvcheckerSuccess :: Version -> NvcheckerRaw
NvcheckerError :: Text -> NvcheckerRaw

-- | The input of nvchecker
data CheckVersion
CheckVersion :: VersionSource -> NvcheckerOptions -> CheckVersion

-- | Configuration available for evey version sourece. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#global-options</a>
--   for details.
data NvcheckerOptions
NvcheckerOptions :: Maybe Text -> Maybe Text -> Maybe Text -> NvcheckerOptions
[_stripPrefix] :: NvcheckerOptions -> Maybe Text
[_fromPattern] :: NvcheckerOptions -> Maybe Text
[_toPattern] :: NvcheckerOptions -> Maybe Text

-- | Using stale value indicates that we will <i>NOT</i> check for new
--   versions if there is a known version recovered from json file or last
--   use of the rule. Normally you don't want a stale version unless you
--   need pin a package.
data UseStaleVersion

-- | Specified in configuration file
PermanentStale :: UseStaleVersion

-- | Specified by <tt>--filter</tt> command
TemporaryStale :: UseStaleVersion
NoStale :: UseStaleVersion

-- | The input of prefetch rule
data RunFetch
RunFetch :: ForceFetch -> NixFetcher Fresh -> RunFetch

-- | Whether to cache the fetched sha256
--   
--   <tt>ForceFetch</tt> indicates <tt>alwaysRerun</tt> the fetcher rule
data ForceFetch
ForceFetch :: ForceFetch
NoForceFetch :: ForceFetch

-- | If the package is prefetched, then we can obtain the SHA256
data NixFetcher (k :: FetchStatus)
FetchGit :: Text -> Version -> Bool -> Bool -> Bool -> Maybe Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_rev] :: NixFetcher (k :: FetchStatus) -> Version
[_deepClone] :: NixFetcher (k :: FetchStatus) -> Bool
[_fetchSubmodules] :: NixFetcher (k :: FetchStatus) -> Bool
[_leaveDotGit] :: NixFetcher (k :: FetchStatus) -> Bool
[_name] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchGitHub :: Text -> Text -> Version -> Bool -> Bool -> Bool -> Maybe Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_fowner] :: NixFetcher (k :: FetchStatus) -> Text
[_frepo] :: NixFetcher (k :: FetchStatus) -> Text
[_rev] :: NixFetcher (k :: FetchStatus) -> Version
[_deepClone] :: NixFetcher (k :: FetchStatus) -> Bool
[_fetchSubmodules] :: NixFetcher (k :: FetchStatus) -> Bool
[_leaveDotGit] :: NixFetcher (k :: FetchStatus) -> Bool
[_name] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchUrl :: Text -> Maybe Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_name] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchTarball :: Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchDocker :: Text -> Text -> FetchResult ContainerDigest k -> FetchResult Checksum k -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> NixFetcher (k :: FetchStatus)
[_imageName] :: NixFetcher (k :: FetchStatus) -> Text
[_imageTag] :: NixFetcher (k :: FetchStatus) -> Text
[_imageDigest] :: NixFetcher (k :: FetchStatus) -> FetchResult ContainerDigest k
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
[_fos] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_farch] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_finalImageName] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_finalImageTag] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_tlsVerify] :: NixFetcher (k :: FetchStatus) -> Maybe Bool

-- | Prefetched fetchers hold hashes
type family FetchResult a (k :: FetchStatus)

-- | Fetch status
data FetchStatus
Fresh :: FetchStatus
Fetched :: FetchStatus

-- | Extract file contents from package source e.g. <tt>Cargo.lock</tt>
data ExtractSrcQ
ExtractSrcQ :: NixFetcher Fetched -> NonEmpty FilePath -> ExtractSrcQ

-- | Fetch <tt>outputHashes</tt> for git dependencies in
--   <tt>Cargo.lock</tt>. See
--   <a>https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file</a>
--   for details. We need fetched source and the file path to
--   <tt>Cargo.lock</tt>.
data FetchRustGitDepsQ
FetchRustGitDepsQ :: NixFetcher Fetched -> FilePath -> FetchRustGitDepsQ

-- | <tt>strftime</tt> format
--   
--   Nothing defaults to <tt>%Y-%m-%d</tt>
newtype DateFormat
DateFormat :: Maybe Text -> DateFormat

-- | Get the commit date by using shallow clone
--   
--   <tt>_gformat</tt> is in. Note: Requires git &gt;= 2.5
data GetGitCommitDate
GetGitCommitDate :: Text -> Text -> DateFormat -> GetGitCommitDate
[_gurl] :: GetGitCommitDate -> Text
[_grev] :: GetGitCommitDate -> Text
[_gformat] :: GetGitCommitDate -> DateFormat

-- | The key type of nvfetcher rule. See <a>NvFetcher.Core</a>
data Core
Core :: Core

-- | Package name, used in generating nix expr
type PackageName = Text

-- | How to create package source fetcher given a version
type PackageFetcher = Version -> NixFetcher Fresh
newtype PackageExtractSrc
PackageExtractSrc :: NonEmpty FilePath -> PackageExtractSrc
newtype PackageCargoLockFiles
PackageCargoLockFiles :: NonEmpty FilePath -> PackageCargoLockFiles
newtype PackagePassthru
PackagePassthru :: HashMap Text Text -> PackagePassthru

-- | A package is defined with:
--   
--   <ol>
--   <li>its name</li>
--   <li>how to track its version</li>
--   <li>how to fetch it as we have the version</li>
--   <li>optional file paths to extract (dump to build dir)</li>
--   <li>optional <tt>Cargo.lock</tt> path (if it's a rust package)</li>
--   <li>an optional pass through map</li>
--   <li>if the package version was pinned</li>
--   <li>optional git date format (if the version source is git)</li>
--   <li>whether to always fetch a package regardless of the version
--   changing <i>INVARIANT: <a>Version</a> passed to <a>PackageFetcher</a>
--   MUST be used textually,</i> <i>i.e. can only be concatenated with
--   other strings,</i> <i>in case we can't check the equality between
--   fetcher functions.</i></li>
--   </ol>
data Package
Package :: PackageName -> CheckVersion -> PackageFetcher -> Maybe PackageExtractSrc -> Maybe PackageCargoLockFiles -> PackagePassthru -> UseStaleVersion -> DateFormat -> ForceFetch -> Package
[_pname] :: Package -> PackageName
[_pversion] :: Package -> CheckVersion
[_pfetcher] :: Package -> PackageFetcher
[_pextract] :: Package -> Maybe PackageExtractSrc
[_pcargo] :: Package -> Maybe PackageCargoLockFiles
[_ppassthru] :: Package -> PackagePassthru
[_ppinned] :: Package -> UseStaleVersion
[_pgitdateformat] :: Package -> DateFormat
[_pforcefetch] :: Package -> ForceFetch

-- | Package key is the name of a package. We use this type to index
--   packages.
newtype PackageKey
PackageKey :: PackageName -> PackageKey

-- | Result type of <a>Core</a>
data PackageResult
PackageResult :: PackageName -> NvcheckerResult -> NixFetcher 'Fetched -> Maybe (HashMap Text Text) -> Maybe (HashMap FilePath NixExpr) -> Maybe (HashMap FilePath (NixExpr, HashMap Text Checksum)) -> UseStaleVersion -> Maybe Text -> PackageResult
[_prname] :: PackageResult -> PackageName
[_prversion] :: PackageResult -> NvcheckerResult
[_prfetched] :: PackageResult -> NixFetcher 'Fetched
[_prpassthru] :: PackageResult -> Maybe (HashMap Text Text)

-- | extracted file name -&gt; file path in build dir
[_prextract] :: PackageResult -> Maybe (HashMap FilePath NixExpr)

-- | cargo lock file path in build dir -&gt; (file path in nix, git
--   dependencies)
[_prcargolock] :: PackageResult -> Maybe (HashMap FilePath (NixExpr, HashMap Text Checksum))
[_prpinned] :: PackageResult -> UseStaleVersion
[_prgitdate] :: PackageResult -> Maybe Text
instance Control.DeepSeq.NFData NvFetcher.Types.Version
instance Data.Binary.Class.Binary NvFetcher.Types.Version
instance Data.Hashable.Class.Hashable NvFetcher.Types.Version
instance GHC.Generics.Generic NvFetcher.Types.Version
instance Prettyprinter.Internal.Pretty NvFetcher.Types.Version
instance Data.Aeson.Types.ToJSON.ToJSON NvFetcher.Types.Version
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.Version
instance GHC.Base.Monoid NvFetcher.Types.Version
instance GHC.Base.Semigroup NvFetcher.Types.Version
instance Data.String.IsString NvFetcher.Types.Version
instance GHC.Classes.Ord NvFetcher.Types.Version
instance GHC.Show.Show NvFetcher.Types.Version
instance GHC.Classes.Eq NvFetcher.Types.Version
instance Control.DeepSeq.NFData NvFetcher.Types.Checksum
instance Data.Binary.Class.Binary NvFetcher.Types.Checksum
instance Data.Hashable.Class.Hashable NvFetcher.Types.Checksum
instance GHC.Generics.Generic NvFetcher.Types.Checksum
instance Prettyprinter.Internal.Pretty NvFetcher.Types.Checksum
instance Data.Aeson.Types.ToJSON.ToJSON NvFetcher.Types.Checksum
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.Checksum
instance GHC.Classes.Ord NvFetcher.Types.Checksum
instance GHC.Classes.Eq NvFetcher.Types.Checksum
instance GHC.Show.Show NvFetcher.Types.Checksum
instance Control.DeepSeq.NFData NvFetcher.Types.ContainerDigest
instance Data.Binary.Class.Binary NvFetcher.Types.ContainerDigest
instance Data.Hashable.Class.Hashable NvFetcher.Types.ContainerDigest
instance GHC.Generics.Generic NvFetcher.Types.ContainerDigest
instance Prettyprinter.Internal.Pretty NvFetcher.Types.ContainerDigest
instance Data.Aeson.Types.ToJSON.ToJSON NvFetcher.Types.ContainerDigest
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.ContainerDigest
instance GHC.Classes.Ord NvFetcher.Types.ContainerDigest
instance GHC.Classes.Eq NvFetcher.Types.ContainerDigest
instance GHC.Show.Show NvFetcher.Types.ContainerDigest
instance Control.DeepSeq.NFData NvFetcher.Types.Branch
instance Data.Binary.Class.Binary NvFetcher.Types.Branch
instance Data.Hashable.Class.Hashable NvFetcher.Types.Branch
instance GHC.Generics.Generic NvFetcher.Types.Branch
instance Prettyprinter.Internal.Pretty NvFetcher.Types.Branch
instance Data.Default.Class.Default NvFetcher.Types.Branch
instance GHC.Classes.Ord NvFetcher.Types.Branch
instance GHC.Classes.Eq NvFetcher.Types.Branch
instance GHC.Show.Show NvFetcher.Types.Branch
instance Control.DeepSeq.NFData NvFetcher.Types.VersionSortMethod
instance Data.Binary.Class.Binary NvFetcher.Types.VersionSortMethod
instance Data.Hashable.Class.Hashable NvFetcher.Types.VersionSortMethod
instance GHC.Generics.Generic NvFetcher.Types.VersionSortMethod
instance GHC.Enum.Enum NvFetcher.Types.VersionSortMethod
instance GHC.Classes.Ord NvFetcher.Types.VersionSortMethod
instance GHC.Classes.Eq NvFetcher.Types.VersionSortMethod
instance Data.Default.Class.Default NvFetcher.Types.ListOptions
instance Control.DeepSeq.NFData NvFetcher.Types.ListOptions
instance Data.Binary.Class.Binary NvFetcher.Types.ListOptions
instance Data.Hashable.Class.Hashable NvFetcher.Types.ListOptions
instance GHC.Generics.Generic NvFetcher.Types.ListOptions
instance GHC.Classes.Ord NvFetcher.Types.ListOptions
instance GHC.Classes.Eq NvFetcher.Types.ListOptions
instance GHC.Show.Show NvFetcher.Types.ListOptions
instance Data.Default.Class.Default NvFetcher.Types.NvcheckerOptions
instance Control.DeepSeq.NFData NvFetcher.Types.NvcheckerOptions
instance Data.Binary.Class.Binary NvFetcher.Types.NvcheckerOptions
instance Data.Hashable.Class.Hashable NvFetcher.Types.NvcheckerOptions
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerOptions
instance GHC.Classes.Ord NvFetcher.Types.NvcheckerOptions
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerOptions
instance GHC.Show.Show NvFetcher.Types.NvcheckerOptions
instance Control.DeepSeq.NFData NvFetcher.Types.VersionSource
instance Data.Binary.Class.Binary NvFetcher.Types.VersionSource
instance Data.Hashable.Class.Hashable NvFetcher.Types.VersionSource
instance GHC.Generics.Generic NvFetcher.Types.VersionSource
instance GHC.Classes.Ord NvFetcher.Types.VersionSource
instance GHC.Classes.Eq NvFetcher.Types.VersionSource
instance GHC.Show.Show NvFetcher.Types.VersionSource
instance Control.DeepSeq.NFData NvFetcher.Types.CheckVersion
instance Data.Binary.Class.Binary NvFetcher.Types.CheckVersion
instance Data.Hashable.Class.Hashable NvFetcher.Types.CheckVersion
instance GHC.Generics.Generic NvFetcher.Types.CheckVersion
instance GHC.Classes.Ord NvFetcher.Types.CheckVersion
instance GHC.Classes.Eq NvFetcher.Types.CheckVersion
instance GHC.Show.Show NvFetcher.Types.CheckVersion
instance Control.DeepSeq.NFData NvFetcher.Types.NvcheckerResult
instance Data.Binary.Class.Binary NvFetcher.Types.NvcheckerResult
instance Data.Hashable.Class.Hashable NvFetcher.Types.NvcheckerResult
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerResult
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerResult
instance GHC.Show.Show NvFetcher.Types.NvcheckerResult
instance GHC.Generics.Generic NvFetcher.Types.NvcheckerRaw
instance GHC.Classes.Eq NvFetcher.Types.NvcheckerRaw
instance GHC.Show.Show NvFetcher.Types.NvcheckerRaw
instance GHC.Generics.Generic NvFetcher.Types.ForceFetch
instance Data.Binary.Class.Binary NvFetcher.Types.ForceFetch
instance Control.DeepSeq.NFData NvFetcher.Types.ForceFetch
instance Data.Hashable.Class.Hashable NvFetcher.Types.ForceFetch
instance GHC.Classes.Ord NvFetcher.Types.ForceFetch
instance GHC.Classes.Eq NvFetcher.Types.ForceFetch
instance GHC.Show.Show NvFetcher.Types.ForceFetch
instance GHC.Generics.Generic (NvFetcher.Types.NixFetcher k)
instance GHC.Generics.Generic NvFetcher.Types.RunFetch
instance Data.Binary.Class.Binary NvFetcher.Types.RunFetch
instance Control.DeepSeq.NFData NvFetcher.Types.RunFetch
instance Data.Hashable.Class.Hashable NvFetcher.Types.RunFetch
instance GHC.Classes.Ord NvFetcher.Types.RunFetch
instance GHC.Classes.Eq NvFetcher.Types.RunFetch
instance GHC.Show.Show NvFetcher.Types.RunFetch
instance GHC.Generics.Generic NvFetcher.Types.ExtractSrcQ
instance Data.Binary.Class.Binary NvFetcher.Types.ExtractSrcQ
instance Control.DeepSeq.NFData NvFetcher.Types.ExtractSrcQ
instance Data.Hashable.Class.Hashable NvFetcher.Types.ExtractSrcQ
instance GHC.Classes.Ord NvFetcher.Types.ExtractSrcQ
instance GHC.Classes.Eq NvFetcher.Types.ExtractSrcQ
instance GHC.Show.Show NvFetcher.Types.ExtractSrcQ
instance GHC.Generics.Generic NvFetcher.Types.FetchRustGitDepsQ
instance Data.Binary.Class.Binary NvFetcher.Types.FetchRustGitDepsQ
instance Control.DeepSeq.NFData NvFetcher.Types.FetchRustGitDepsQ
instance Data.Hashable.Class.Hashable NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Classes.Ord NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Classes.Eq NvFetcher.Types.FetchRustGitDepsQ
instance GHC.Show.Show NvFetcher.Types.FetchRustGitDepsQ
instance Control.DeepSeq.NFData NvFetcher.Types.DateFormat
instance Data.Binary.Class.Binary NvFetcher.Types.DateFormat
instance Data.Hashable.Class.Hashable NvFetcher.Types.DateFormat
instance GHC.Generics.Generic NvFetcher.Types.DateFormat
instance Prettyprinter.Internal.Pretty NvFetcher.Types.DateFormat
instance Data.Default.Class.Default NvFetcher.Types.DateFormat
instance GHC.Classes.Ord NvFetcher.Types.DateFormat
instance GHC.Classes.Eq NvFetcher.Types.DateFormat
instance GHC.Show.Show NvFetcher.Types.DateFormat
instance GHC.Generics.Generic NvFetcher.Types.GetGitCommitDate
instance Data.Binary.Class.Binary NvFetcher.Types.GetGitCommitDate
instance Control.DeepSeq.NFData NvFetcher.Types.GetGitCommitDate
instance Data.Hashable.Class.Hashable NvFetcher.Types.GetGitCommitDate
instance GHC.Classes.Ord NvFetcher.Types.GetGitCommitDate
instance GHC.Classes.Eq NvFetcher.Types.GetGitCommitDate
instance GHC.Show.Show NvFetcher.Types.GetGitCommitDate
instance GHC.Classes.Eq NvFetcher.Types.VersionChange
instance GHC.Base.Monoid NvFetcher.Types.PackagePassthru
instance GHC.Base.Semigroup NvFetcher.Types.PackagePassthru
instance Control.DeepSeq.NFData NvFetcher.Types.UseStaleVersion
instance Data.Binary.Class.Binary NvFetcher.Types.UseStaleVersion
instance Data.Hashable.Class.Hashable NvFetcher.Types.UseStaleVersion
instance GHC.Generics.Generic NvFetcher.Types.UseStaleVersion
instance GHC.Classes.Ord NvFetcher.Types.UseStaleVersion
instance GHC.Show.Show NvFetcher.Types.UseStaleVersion
instance GHC.Classes.Eq NvFetcher.Types.UseStaleVersion
instance Control.DeepSeq.NFData NvFetcher.Types.PackageKey
instance Data.Binary.Class.Binary NvFetcher.Types.PackageKey
instance Data.Hashable.Class.Hashable NvFetcher.Types.PackageKey
instance GHC.Generics.Generic NvFetcher.Types.PackageKey
instance Prettyprinter.Internal.Pretty NvFetcher.Types.PackageKey
instance GHC.Classes.Ord NvFetcher.Types.PackageKey
instance GHC.Show.Show NvFetcher.Types.PackageKey
instance GHC.Classes.Eq NvFetcher.Types.PackageKey
instance Control.DeepSeq.NFData NvFetcher.Types.Core
instance Data.Binary.Class.Binary NvFetcher.Types.Core
instance Data.Hashable.Class.Hashable NvFetcher.Types.Core
instance GHC.Generics.Generic NvFetcher.Types.Core
instance GHC.Classes.Ord NvFetcher.Types.Core
instance GHC.Show.Show NvFetcher.Types.Core
instance GHC.Classes.Eq NvFetcher.Types.Core
instance Control.DeepSeq.NFData k => Control.DeepSeq.NFData (NvFetcher.Types.WithPackageKey k)
instance Data.Binary.Class.Binary k => Data.Binary.Class.Binary (NvFetcher.Types.WithPackageKey k)
instance Data.Hashable.Class.Hashable k => Data.Hashable.Class.Hashable (NvFetcher.Types.WithPackageKey k)
instance GHC.Classes.Eq k => GHC.Classes.Eq (NvFetcher.Types.WithPackageKey k)
instance Control.DeepSeq.NFData NvFetcher.Types.PackageResult
instance GHC.Generics.Generic NvFetcher.Types.PackageResult
instance GHC.Show.Show NvFetcher.Types.PackageResult
instance NvFetcher.Types.ForFetchResult GHC.Show.Show k => GHC.Show.Show (NvFetcher.Types.NixFetcher k)
instance NvFetcher.Types.ForFetchResult GHC.Classes.Eq k => GHC.Classes.Eq (NvFetcher.Types.NixFetcher k)
instance NvFetcher.Types.ForFetchResult GHC.Classes.Ord k => GHC.Classes.Ord (NvFetcher.Types.NixFetcher k)
instance NvFetcher.Types.ForFetchResult Data.Hashable.Class.Hashable k => Data.Hashable.Class.Hashable (NvFetcher.Types.NixFetcher k)
instance NvFetcher.Types.ForFetchResult Data.Binary.Class.Binary k => Data.Binary.Class.Binary (NvFetcher.Types.NixFetcher k)
instance NvFetcher.Types.ForFetchResult Control.DeepSeq.NFData k => Control.DeepSeq.NFData (NvFetcher.Types.NixFetcher k)
instance Data.Aeson.Types.ToJSON.ToJSON NvFetcher.Types.PackageResult
instance GHC.Show.Show k => GHC.Show.Show (NvFetcher.Types.WithPackageKey k)
instance GHC.Show.Show NvFetcher.Types.VersionChange
instance Prettyprinter.Internal.Pretty NvFetcher.Types.GetGitCommitDate
instance Prettyprinter.Internal.Pretty NvFetcher.Types.FetchRustGitDepsQ
instance Prettyprinter.Internal.Pretty NvFetcher.Types.ExtractSrcQ
instance Data.Aeson.Types.ToJSON.ToJSON (NvFetcher.Types.NixFetcher 'NvFetcher.Types.Fetched)
instance Prettyprinter.Internal.Pretty (NvFetcher.Types.NixFetcher k)
instance (c (NvFetcher.Types.FetchResult NvFetcher.Types.Checksum k), c (NvFetcher.Types.FetchResult NvFetcher.Types.ContainerDigest k)) => NvFetcher.Types.ForFetchResult c k
instance Prettyprinter.Internal.Pretty NvFetcher.Types.ForceFetch
instance Data.Default.Class.Default NvFetcher.Types.ForceFetch
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.Types.NvcheckerRaw
instance Prettyprinter.Internal.Pretty NvFetcher.Types.CheckVersion
instance Prettyprinter.Internal.Pretty NvFetcher.Types.VersionSource
instance Prettyprinter.Internal.Pretty NvFetcher.Types.NvcheckerOptions
instance Prettyprinter.Internal.Pretty NvFetcher.Types.ListOptions
instance GHC.Show.Show NvFetcher.Types.VersionSortMethod
instance Prettyprinter.Internal.Pretty NvFetcher.Types.VersionSortMethod
instance Data.Default.Class.Default NvFetcher.Types.VersionSortMethod


-- | This module provides mechanisms for obtaining the git commit date. The
--   cloned repo will not be preserved.
module NvFetcher.GetGitCommitDate

-- | <tt>strftime</tt> format
--   
--   Nothing defaults to <tt>%Y-%m-%d</tt>
newtype DateFormat
DateFormat :: Maybe Text -> DateFormat

-- | Get the commit date by using shallow clone
--   
--   <tt>_gformat</tt> is in. Note: Requires git &gt;= 2.5
data GetGitCommitDate
GetGitCommitDate :: Text -> Text -> DateFormat -> GetGitCommitDate
[_gurl] :: GetGitCommitDate -> Text
[_grev] :: GetGitCommitDate -> Text
[_gformat] :: GetGitCommitDate -> DateFormat
getGitCommitDateRule :: Rules ()
getGitCommitDate :: Text -> Text -> DateFormat -> Action Text


-- | Lenses for <a>NvFetcher.Types</a>
module NvFetcher.Types.Lens
sortVersionKey :: Lens' ListOptions (Maybe VersionSortMethod)
includeRegex :: Lens' ListOptions (Maybe Text)
ignored :: Lens' ListOptions (Maybe Text)
excludeRegex :: Lens' ListOptions (Maybe Text)
toPattern :: Lens' NvcheckerOptions (Maybe Text)
stripPrefix :: Lens' NvcheckerOptions (Maybe Text)
fromPattern :: Lens' NvcheckerOptions (Maybe Text)
vurl :: Traversal' VersionSource Text
vsmPublisher :: Traversal' VersionSource Text
vsmExtName :: Traversal' VersionSource Text
vcontainer :: Traversal' VersionSource Text
vcmd :: Traversal' VersionSource Text
vbranch :: Traversal' VersionSource Branch
repology :: Traversal' VersionSource Text
repo :: Traversal' VersionSource Text
regex :: Traversal' VersionSource Text
pypi :: Traversal' VersionSource Text
owner :: Traversal' VersionSource Text
ovPublisher :: Traversal' VersionSource Text
ovExtName :: Traversal' VersionSource Text
manual :: Traversal' VersionSource Text
listOptions :: Traversal' VersionSource ListOptions
aur :: Traversal' VersionSource Text
archpkg :: Traversal' VersionSource Text
tlsVerify :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (Maybe Bool)
sha256 :: forall k_iYsZ. Lens' (NixFetcher k_iYsZ) (FetchResult Checksum k_iYsZ)
rev :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Version
name :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (Maybe Text)
leaveDotGit :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Bool
imageTag :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Text
imageName :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Text
imageDigest :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (FetchResult ContainerDigest k_iYsZ)
furl :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Text
frepo :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Text
fowner :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Text
fos :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (Maybe Text)
finalImageTag :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (Maybe Text)
finalImageName :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (Maybe Text)
fetchSubmodules :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Bool
farch :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) (Maybe Text)
deepClone :: forall k_iYsZ. Traversal' (NixFetcher k_iYsZ) Bool
pversion :: Lens' Package CheckVersion
ppinned :: Lens' Package UseStaleVersion
ppassthru :: Lens' Package PackagePassthru
pname :: Lens' Package PackageName
pgitdateformat :: Lens' Package DateFormat
pforcefetch :: Lens' Package ForceFetch
pfetcher :: Lens' Package PackageFetcher
pextract :: Lens' Package (Maybe PackageExtractSrc)
pcargo :: Lens' Package (Maybe PackageCargoLockFiles)


-- | This module is about global information we use in rules.
module NvFetcher.Types.ShakeExtras

-- | Values we use during the build. It's stored in <a>shakeExtra</a>
data ShakeExtras
ShakeExtras :: Config -> Var [VersionChange] -> Map PackageKey Package -> Var (Map PackageKey LastVersion) -> ShakeExtras
[config] :: ShakeExtras -> Config
[versionChanges] :: ShakeExtras -> Var [VersionChange]
[targetPackages] :: ShakeExtras -> Map PackageKey Package
[lastVersions] :: ShakeExtras -> Var (Map PackageKey LastVersion)

-- | Create an empty <a>ShakeExtras</a> from packages to build, times to
--   retry for each rule, build dir, and on disk versions
initShakeExtras :: Config -> Map PackageKey Package -> Map PackageKey Version -> IO ShakeExtras

-- | Get our values from shake
getShakeExtras :: Action ShakeExtras

-- | Find a package given its key
lookupPackage :: PackageKey -> Action (Maybe Package)

-- | Get keys of all packages to build
getAllPackageKeys :: Action [PackageKey]

-- | Check if we need build this package
isPackageKeyTarget :: PackageKey -> Action Bool

-- | Record version change of a package
recordVersionChange :: PackageName -> Maybe Version -> Version -> Action ()

-- | Get version changes since the last run
getVersionChanges :: Action [VersionChange]

-- | Run an action, retry at most <a>retry</a> times (defined in config) if
--   it throws an exception
withRetry :: Action a -> Action a

-- | Get build dir
getBuildDir :: Action FilePath

-- | Get keyfile path
getKeyfilePath :: Action (Maybe FilePath)

-- | Get initial version of a package
getLastVersionOnDisk :: PackageKey -> Action (Maybe Version)

-- | Get version of a package, no matter it was initial one or rule result
getRecentLastVersion :: PackageKey -> Action (Maybe Version)

-- | Add nvchecker result of a package
updateLastVersion :: PackageKey -> Version -> Action ()

-- | Get all initial versions
getAllOnDiskVersions :: Action (Map PackageKey Version)

-- | Get updated version of a package
getLastVersionUpdated :: PackageKey -> Action (Maybe Version)

-- | Get if <a>cacheNvchecker</a> is enabled
nvcheckerCacheEnabled :: Action Bool


-- | <a>NixFetcher</a> is used to describe how to fetch package sources.
--   
--   There are five types of fetchers overall:
--   
--   <ol>
--   <li><a>FetchGit</a> -- nix-prefetch-git</li>
--   <li><a>FetchGitHub</a> -- nix-prefetch-git/nix-prefetch-url</li>
--   <li><a>FetchUrl</a> -- nix-prefetch-url</li>
--   <li><a>FetchTarball</a> -- nix-prefetch-url</li>
--   <li><a>FetchDocker</a> -- nix-prefetch-docker</li>
--   </ol>
--   
--   As you can see the type signature of <a>prefetch</a>: a fetcher will
--   be filled with the fetch result (hash) after the prefetch.
module NvFetcher.NixFetcher

-- | The input of prefetch rule
data RunFetch
RunFetch :: ForceFetch -> NixFetcher Fresh -> RunFetch

-- | Whether to cache the fetched sha256
--   
--   <tt>ForceFetch</tt> indicates <tt>alwaysRerun</tt> the fetcher rule
data ForceFetch
ForceFetch :: ForceFetch
NoForceFetch :: ForceFetch

-- | If the package is prefetched, then we can obtain the SHA256
data NixFetcher (k :: FetchStatus)
FetchGit :: Text -> Version -> Bool -> Bool -> Bool -> Maybe Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_rev] :: NixFetcher (k :: FetchStatus) -> Version
[_deepClone] :: NixFetcher (k :: FetchStatus) -> Bool
[_fetchSubmodules] :: NixFetcher (k :: FetchStatus) -> Bool
[_leaveDotGit] :: NixFetcher (k :: FetchStatus) -> Bool
[_name] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchGitHub :: Text -> Text -> Version -> Bool -> Bool -> Bool -> Maybe Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_fowner] :: NixFetcher (k :: FetchStatus) -> Text
[_frepo] :: NixFetcher (k :: FetchStatus) -> Text
[_rev] :: NixFetcher (k :: FetchStatus) -> Version
[_deepClone] :: NixFetcher (k :: FetchStatus) -> Bool
[_fetchSubmodules] :: NixFetcher (k :: FetchStatus) -> Bool
[_leaveDotGit] :: NixFetcher (k :: FetchStatus) -> Bool
[_name] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchUrl :: Text -> Maybe Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_name] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchTarball :: Text -> FetchResult Checksum k -> NixFetcher (k :: FetchStatus)
[_furl] :: NixFetcher (k :: FetchStatus) -> Text
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
FetchDocker :: Text -> Text -> FetchResult ContainerDigest k -> FetchResult Checksum k -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> NixFetcher (k :: FetchStatus)
[_imageName] :: NixFetcher (k :: FetchStatus) -> Text
[_imageTag] :: NixFetcher (k :: FetchStatus) -> Text
[_imageDigest] :: NixFetcher (k :: FetchStatus) -> FetchResult ContainerDigest k
[_sha256] :: NixFetcher (k :: FetchStatus) -> FetchResult Checksum k
[_fos] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_farch] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_finalImageName] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_finalImageTag] :: NixFetcher (k :: FetchStatus) -> Maybe Text
[_tlsVerify] :: NixFetcher (k :: FetchStatus) -> Maybe Bool

-- | Fetch status
data FetchStatus
Fresh :: FetchStatus
Fetched :: FetchStatus

-- | Prefetched fetchers hold hashes
type family FetchResult a (k :: FetchStatus)

-- | Rules of nix fetcher
prefetchRule :: Rules ()

-- | Run nix fetcher
prefetch :: NixFetcher Fresh -> ForceFetch -> Action (NixFetcher Fetched)

-- | Create a fetcher from github repo
gitHubFetcher :: (Text, Text) -> PackageFetcher

-- | Create a fetcher from pypi
pypiFetcher :: Text -> PackageFetcher

-- | Create a fetcher from github release
gitHubReleaseFetcher :: (Text, Text) -> Text -> PackageFetcher

-- | Create a fetcher from github release
gitHubReleaseFetcher' :: (Text, Text) -> (Version -> Text) -> PackageFetcher

-- | Create a fetcher from git url
gitFetcher :: Text -> PackageFetcher

-- | Create a fetcher from url
urlFetcher :: Text -> NixFetcher Fresh

-- | Create a fetcher from openvsx
openVsxFetcher :: (Text, Text) -> PackageFetcher

-- | Create a fetcher from vscode marketplace
vscodeMarketplaceFetcher :: (Text, Text) -> PackageFetcher

-- | Create a fetcher from url, using fetchTarball
tarballFetcher :: Text -> NixFetcher Fresh
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.NixFetcher.FetchedGit
instance GHC.Generics.Generic NvFetcher.NixFetcher.FetchedGit
instance GHC.Show.Show NvFetcher.NixFetcher.FetchedGit
instance Data.Aeson.Types.FromJSON.FromJSON NvFetcher.NixFetcher.FetchedContainer
instance GHC.Generics.Generic NvFetcher.NixFetcher.FetchedContainer
instance GHC.Show.Show NvFetcher.NixFetcher.FetchedContainer


-- | This module mainly contains two things: <a>PackageSet</a> and
--   <a>PkgDSL</a>. NvFetcher accepts the former one -- a set of packages
--   to produce nix sources expr; the later one is used to construct a
--   single package.
--   
--   There are many combinators for defining packages. See the
--   documentation of <a>define</a> for example.
module NvFetcher.PackageSet

-- | Atomic terms of package set
data PackageSetF f

-- | Package set is a monad equipped with two capabilities:
--   
--   <ol>
--   <li>Carry defined packages</li>
--   <li>Run IO actions</li>
--   </ol>
--   
--   Package set is evaluated before shake runs. Use <a>newPackage</a> to
--   add a new package, <a>liftIO</a> to run an IO action.
type PackageSet = Free PackageSetF

-- | Add a package to package set
newPackage :: PackageName -> CheckVersion -> PackageFetcher -> Maybe PackageExtractSrc -> Maybe PackageCargoLockFiles -> PackagePassthru -> UseStaleVersion -> DateFormat -> ForceFetch -> PackageSet ()

-- | Add a list of packages into package set
purePackageSet :: [Package] -> PackageSet ()

-- | Run package set into a set of packages
--   
--   Throws exception as more then one packages with the same name are
--   defined
runPackageSet :: PackageSet () -> IO (Map PackageKey Package)

-- | A tagless final style DSL for constructing packages
class PkgDSL f
new :: PkgDSL f => f PackageName -> f (Prod '[PackageName])
andThen :: PkgDSL f => f (Prod r) -> f a -> f (Prod (a ': r))
end :: (PkgDSL f, Members '[PackageName, VersionSource, PackageFetcher] r, OptionalMembers '[PackageExtractSrc, PackageCargoLockFiles, NvcheckerOptions, PackagePassthru, UseStaleVersion, DateFormat, ForceFetch] r) => f (Prod r) -> f ()

-- | <a>PkgDSL</a> version of <a>newPackage</a>
--   
--   Example:
--   
--   <pre>
--   define $ package "nvfetcher-git" <a>sourceGit</a> "<a>https://github.com/berberman/nvfetcher"</a> <a>fetchGitHub</a> ("berberman", "nvfetcher")
--   </pre>
define :: (Members '[PackageName, VersionSource, PackageFetcher] r, OptionalMembers '[PackageExtractSrc, PackageCargoLockFiles, PackagePassthru, NvcheckerOptions, UseStaleVersion, DateFormat, ForceFetch] r) => PackageSet (Prod r) -> PackageSet ()

-- | Start chaining with the name of package to define
package :: PackageName -> PackageSet (Prod '[PackageName])

-- | Attach version sources
src :: Attach VersionSource VersionSource

-- | Attach fetchers
fetch :: Attach PackageFetcher PackageFetcher

-- | A synonym of <a>fetchGitHub</a> and <a>sourceGitHub</a>
fromGitHub :: AttachMany '[PackageFetcher, VersionSource] (Text, Text)

-- | A synonym of <a>fetchGitHub'</a> and <a>sourceGitHub</a>
fromGitHub' :: AttachMany '[PackageFetcher, VersionSource] (Text, Text, NixFetcher Fresh -> NixFetcher Fresh)

-- | A synonym of <a>fetchGitHub</a> and <a>sourceGitHubTag</a>
fromGitHubTag :: AttachMany '[PackageFetcher, VersionSource] (Text, Text, ListOptions -> ListOptions)

-- | A synonym of <a>fetchGitHub'</a> and <a>sourceGitHubTag</a>
fromGitHubTag' :: AttachMany '[PackageFetcher, VersionSource] (Text, Text, ListOptions -> ListOptions, NixFetcher Fresh -> NixFetcher Fresh)

-- | A synonym of <a>fetchPypi</a> and <a>sourcePypi</a>
fromPypi :: AttachMany '[PackageFetcher, VersionSource] Text

-- | A synonym of <a>fetchOpenVsx</a>, <a>sourceOpenVsx</a>, and
--   <a>passthru</a> extension's publisher with name
fromOpenVsx :: AttachMany '[PackagePassthru, PackageFetcher, VersionSource] (Text, Text)

-- | A synonym of <a>fetchVscodeMarketplace</a>,
--   <a>sourceVscodeMarketplace</a>, and <a>passthru</a> extension's
--   publisher with name
fromVscodeMarketplace :: AttachMany '[PackagePassthru, PackageFetcher, VersionSource] (Text, Text)

-- | This package follows the latest github release
sourceGitHub :: Attach VersionSource (Text, Text)

-- | This package follows the a tag from github
--   
--   Args are owner, repo, and nvchecker list options to find the target
--   tag
sourceGitHubTag :: Attach VersionSource (Text, Text, ListOptions -> ListOptions)

-- | This package follows the latest git commit
--   
--   Arg is git url
sourceGit :: Attach VersionSource Text

-- | Similar to <a>sourceGit</a>, but allows to specify branch
--   
--   Args are git url and branch
sourceGit' :: Attach VersionSource (Text, Text)

-- | This package follows the latest pypi release
--   
--   Arg is pypi name
sourcePypi :: Attach VersionSource Text

-- | This package follows the version of an Aur package
--   
--   Arg is package name in Aur
sourceAur :: Attach VersionSource Text

-- | This package follows the version of an Arch Linux package
--   
--   Arg is package name in Arch Linux repo
sourceArchLinux :: Attach VersionSource Text

-- | This package follows a pinned version
--   
--   Arg is manual version
sourceManual :: Attach VersionSource Text

-- | This package follows the version of a repology package
--   
--   Args are repology project name and repo
sourceRepology :: Attach VersionSource (Text, Text)

-- | This package follows a version extracted from web page
--   
--   Args are web page url, regex, and list options
sourceWebpage :: Attach VersionSource (Text, Text, ListOptions -> ListOptions)

-- | This package follows a version extracted from http header
--   
--   Args are the url of the http request, regex, and list options
sourceHttpHeader :: Attach VersionSource (Text, Text, ListOptions -> ListOptions)

-- | This package follows a version in Open VSX
--   
--   Args are publisher and extension name
sourceOpenVsx :: Attach VersionSource (Text, Text)

-- | This package follows a version in Vscode Marketplace
--   
--   Args are publisher and extension name
sourceVscodeMarketplace :: Attach VersionSource (Text, Text)

-- | This package follows a version from a shell command
--   
--   Arg is the command to run
sourceCmd :: Attach VersionSource Text

-- | This package is fetched from a github repo
--   
--   Args are owner and repo
fetchGitHub :: Attach PackageFetcher (Text, Text)

-- | This package is fetched from a github repo
--   
--   Similar to <a>fetchGitHub</a>, but allows a modifier to the fetcher.
--   For example, you can enable fetch submodules like:
--   
--   <pre>
--   define $ package "qliveplayer" <a>sourceGitHub</a> (<a>THMonster</a>, <a>QLivePlayer</a>) <a>fetchGitHub'</a> (<a>THMonster</a>, <a>QLivePlayer</a>, fetchSubmodules .~ True)
--   </pre>
fetchGitHub' :: Attach PackageFetcher (Text, Text, NixFetcher Fresh -> NixFetcher Fresh)

-- | This package is fetched from a file in github release
--   
--   Args are owner, repo, and file name
fetchGitHubRelease :: Attach PackageFetcher (Text, Text, Text)

-- | This package is fetched from a file in github release
--   
--   Args are owner, repo, and file name computed from version
fetchGitHubRelease' :: Attach PackageFetcher (Text, Text, Version -> Text)

-- | This package is fetched from pypi
--   
--   Arg is pypi name
fetchPypi :: Attach PackageFetcher Text

-- | This package is fetched from git
--   
--   Arg is git url
fetchGit :: Attach PackageFetcher Text

-- | This package is fetched from git
--   
--   Similar to <a>fetchGit</a>, but allows a modifier to the fetcher. See
--   <a>fetchGitHub'</a> for a concret example.
fetchGit' :: Attach PackageFetcher (Text, NixFetcher Fresh -> NixFetcher Fresh)

-- | This package is fetched from url
--   
--   Arg is a function which constructs the url from a version
fetchUrl :: Attach PackageFetcher (Version -> Text)

-- | This package is fetched from Open VSX
--   
--   Args are publisher and extension name
fetchOpenVsx :: Attach PackageFetcher (Text, Text)

-- | This package is fetched from Vscode Marketplace
--   
--   Args are publisher and extension name
fetchVscodeMarketplace :: Attach PackageFetcher (Text, Text)

-- | This package is a tarball, fetched from url
--   
--   Arg is a function which constructs the url from a version
fetchTarball :: Attach PackageFetcher (Version -> Text)

-- | Extract files from fetched package source
extractSource :: Attach PackageExtractSrc [FilePath]

-- | Run <tt>FetchRustGitDependencies</tt> given the path to
--   <tt>Cargo.lock</tt> files
--   
--   The lock files will be extracted as well.
hasCargoLocks :: Attach PackageCargoLockFiles [FilePath]

-- | Set <a>NvcheckerOptions</a> for a package, which can tweak the version
--   number we obtain
tweakVersion :: Attach NvcheckerOptions (NvcheckerOptions -> NvcheckerOptions)

-- | An attrs set to pass through
--   
--   Arg is a list of kv pairs
passthru :: Attach PackagePassthru [(Text, Text)]

-- | Pin a package
--   
--   new version won't be checked if we have a stale version
pinned :: PackageSet (Prod r) -> PackageSet (Prod (UseStaleVersion : r))

-- | Specify the date format for getting git commit date
--   
--   Available only for git version source
gitDateFormat :: Attach DateFormat (Maybe Text)

-- | Set always fetching regardless of the version changing
forceFetch :: PackageSet (Prod r) -> PackageSet (Prod (ForceFetch : r))

-- | Simple HList
data Prod (r :: [Type])

-- | <tt>xs ++ ys</tt>, at type level
type family Append xs ys

-- | Project elements from <a>Prod</a>
class Member (a :: Type) (r :: [Type])

-- | Project optional elements from <a>Prod</a>
class OptionalMember (a :: Type) (r :: [Type])

-- | Constraint for producing error messages
type family NotElem (x :: Type) (xs :: [Type]) :: Constraint

-- | A list of <a>Member</a>
type family Members xs r :: Constraint

-- | A list of <a>OptionalMember</a>
type family OptionalMembers xs r :: Constraint

-- | Attach member <tt>x</tt>, with a function <tt>arg</tt>
type Attach x arg = AttachMany '[x] arg

-- | Attach members <tt>xs</tt>, with a function argument <tt>arg</tt>
type AttachMany xs arg = forall r. PackageSet (Prod r) -> arg -> PackageSet (Prod (Append xs r))

-- | The function <tt>coerce</tt> allows you to safely convert between
--   values of types that have the same representation with no run-time
--   overhead. In the simplest case you can use it instead of a newtype
--   constructor, to go from the newtype's concrete type to the abstract
--   type. But it also works in more complicated settings, e.g. converting
--   a list of newtypes to a list of concrete types.
--   
--   This function is representation-polymorphic, but the
--   <tt>RuntimeRep</tt> type argument is marked as <tt>Inferred</tt>,
--   meaning that it is not available for visible type application. This
--   means the typechecker will accept <tt>coerce @Int @Age 42</tt>.
coerce :: forall {k :: RuntimeRep} (a :: TYPE k) (b :: TYPE k). Coercible a b => a -> b

-- | Lift a computation from the <a>IO</a> monad. This allows us to run IO
--   computations in any monadic stack, so long as it supports these kinds
--   of operations (i.e. <a>IO</a> is the base monad for the stack).
--   
--   <h3><b>Example</b></h3>
--   
--   <pre>
--   import Control.Monad.Trans.State -- from the "transformers" library
--   
--   printState :: Show s =&gt; StateT s IO ()
--   printState = do
--     state &lt;- get
--     liftIO $ print state
--   </pre>
--   
--   Had we omitted <tt><a>liftIO</a></tt>, we would have ended up with
--   this error:
--   
--   <pre>
--   • Couldn't match type ‘IO’ with ‘StateT s IO’
--    Expected type: StateT s IO ()
--      Actual type: IO ()
--   </pre>
--   
--   The important part here is the mismatch between <tt>StateT s IO
--   ()</tt> and <tt><a>IO</a> ()</tt>.
--   
--   Luckily, we know of a function that takes an <tt><a>IO</a> a</tt> and
--   returns an <tt>(m a)</tt>: <tt><a>liftIO</a></tt>, enabling us to run
--   the program and see the expected results:
--   
--   <pre>
--   &gt; evalStateT printState "hello"
--   "hello"
--   
--   &gt; evalStateT printState 3
--   3
--   </pre>
liftIO :: MonadIO m => IO a -> m a

-- | <a>&amp;</a> is a reverse application operator. This provides
--   notational convenience. Its precedence is one higher than that of the
--   forward application operator <a>$</a>, which allows <a>&amp;</a> to be
--   nested in <a>$</a>.
--   
--   <pre>
--   &gt;&gt;&gt; 5 &amp; (+1) &amp; show
--   "6"
--   </pre>
(&) :: a -> (a -> b) -> b
infixl 1 &

-- | (<a>.~</a>) assigns a value to the target. It's the same thing as
--   using (<a>%~</a>) with <a>const</a>:
--   
--   <pre>
--   l <a>.~</a> x = l <a>%~</a> <a>const</a> x
--   </pre>
--   
--   See <a>set</a> if you want a non-operator synonym.
--   
--   Here it is used to change 2 fields of a 3-tuple:
--   
--   <pre>
--   &gt;&gt;&gt; (0,0,0) &amp; _1 .~ 1 &amp; _3 .~ 3
--   (1,0,3)
--   </pre>
(.~) :: ASetter s t a b -> b -> s -> t
infixr 4 .~

-- | (<a>%~</a>) applies a function to the target; an alternative
--   explanation is that it is an inverse of <a>sets</a>, which turns a
--   setter into an ordinary function. <tt><a>mapped</a> <a>%~</a>
--   <a>reverse</a></tt> is the same thing as <tt><a>fmap</a>
--   <a>reverse</a></tt>.
--   
--   See <a>over</a> if you want a non-operator synonym.
--   
--   Negating the 1st element of a pair:
--   
--   <pre>
--   &gt;&gt;&gt; (1,2) &amp; _1 %~ negate
--   (-1,2)
--   </pre>
--   
--   Turning all <tt>Left</tt>s in a list to upper case:
--   
--   <pre>
--   &gt;&gt;&gt; (mapped._Left.mapped %~ toUpper) [Left "foo", Right "bar"]
--   [Left "FOO",Right "bar"]
--   </pre>
(%~) :: ASetter s t a b -> (a -> b) -> s -> t
infixr 4 %~

-- | (<a>^.</a>) applies a getter to a value; in other words, it gets a
--   value out of a structure using a getter (which can be a lens,
--   traversal, fold, etc.).
--   
--   Getting 1st field of a tuple:
--   
--   <pre>
--   (<a>^.</a> <a>_1</a>) :: (a, b) -&gt; a
--   (<a>^.</a> <a>_1</a>) = <a>fst</a>
--   </pre>
--   
--   When (<a>^.</a>) is used with a traversal, it combines all results
--   using the <a>Monoid</a> instance for the resulting type. For instance,
--   for lists it would be simple concatenation:
--   
--   <pre>
--   &gt;&gt;&gt; ("str","ing") ^. each
--   "string"
--   </pre>
--   
--   The reason for this is that traversals use <a>Applicative</a>, and the
--   <a>Applicative</a> instance for <a>Const</a> uses monoid concatenation
--   to combine “effects” of <a>Const</a>.
--   
--   A non-operator version of (<a>^.</a>) is called <tt>view</tt>, and
--   it's a bit more general than (<a>^.</a>) (it works in
--   <tt>MonadReader</tt>). If you need the general version, you can get it
--   from <a>microlens-mtl</a>; otherwise there's <a>view</a> available in
--   <a>Lens.Micro.Extras</a>.
(^.) :: s -> Getting a s a -> a
infixl 8 ^.

-- | (<a>?~</a>) is a version of (<a>.~</a>) that wraps the value into
--   <a>Just</a> before setting.
--   
--   <pre>
--   l ?~ b = l .~ Just b
--   </pre>
--   
--   It can be useful in combination with <a>at</a>:
--   
--   <pre>
--   &gt;&gt;&gt; Map.empty &amp; at 3 ?~ x
--   fromList [(3,x)]
--   </pre>
(?~) :: ASetter s t a (Maybe b) -> b -> s -> t
infixr 4 ?~
instance NvFetcher.PackageSet.PkgDSL NvFetcher.PackageSet.PackageSet
instance NvFetcher.PackageSet.NotElem x xs => NvFetcher.PackageSet.Member x (x : xs)
instance NvFetcher.PackageSet.NotElem x xs => NvFetcher.PackageSet.OptionalMember x (x : xs)
instance NvFetcher.PackageSet.OptionalMember x xs => NvFetcher.PackageSet.OptionalMember x (_y : xs)
instance NvFetcher.PackageSet.OptionalMember x '[]
instance NvFetcher.PackageSet.Member x xs => NvFetcher.PackageSet.Member x (_y : xs)
instance (TypeError ...) => NvFetcher.PackageSet.Member x '[]
instance Control.Monad.IO.Class.MonadIO NvFetcher.PackageSet.PackageSet
instance GHC.Base.Functor NvFetcher.PackageSet.PackageSetF


-- | <a>nvchecker</a> is a program checking new versions of packages. We
--   encode the checking process into shake build system, generating
--   configuration of nvchecker and calling it externally. Now we call
--   nvchecker for each <a>VersionSource</a>, which seems not to be
--   efficient, but it's tolerable when running in parallel.
--   
--   Meanwhile, we lose the capabilities of tracking version updates, i.e.
--   normally nvchecker will help us maintain a list of old versions, so
--   that we are able to know which package's version is updated in this
--   run. Fortunately, we can reimplement this in shake, see
--   <a>nvcheckerRule</a> for details.
module NvFetcher.Nvchecker
data VersionSortMethod
ParseVersion :: VersionSortMethod
Vercmp :: VersionSortMethod

-- | Filter-like configuration for some version sources. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#list-options</a>
--   for details.
data ListOptions
ListOptions :: Maybe Text -> Maybe Text -> Maybe VersionSortMethod -> Maybe Text -> ListOptions
[_includeRegex] :: ListOptions -> Maybe Text
[_excludeRegex] :: ListOptions -> Maybe Text
[_sortVersionKey] :: ListOptions -> Maybe VersionSortMethod
[_ignored] :: ListOptions -> Maybe Text

-- | The input of nvchecker
data CheckVersion
CheckVersion :: VersionSource -> NvcheckerOptions -> CheckVersion

-- | Configuration available for evey version sourece. See
--   <a>https://nvchecker.readthedocs.io/en/latest/usage.html#global-options</a>
--   for details.
data NvcheckerOptions
NvcheckerOptions :: Maybe Text -> Maybe Text -> Maybe Text -> NvcheckerOptions
[_stripPrefix] :: NvcheckerOptions -> Maybe Text
[_fromPattern] :: NvcheckerOptions -> Maybe Text
[_toPattern] :: NvcheckerOptions -> Maybe Text

-- | Upstream version source for nvchecker to check
data VersionSource
GitHubRelease :: Text -> Text -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
GitHubTag :: Text -> Text -> ListOptions -> VersionSource
[_owner] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
Git :: Text -> Branch -> VersionSource
[_vurl] :: VersionSource -> Text
[_vbranch] :: VersionSource -> Branch
Pypi :: Text -> VersionSource
[_pypi] :: VersionSource -> Text
ArchLinux :: Text -> VersionSource
[_archpkg] :: VersionSource -> Text
Aur :: Text -> VersionSource
[_aur] :: VersionSource -> Text
Manual :: Text -> VersionSource
[_manual] :: VersionSource -> Text
Repology :: Text -> Text -> VersionSource
[_repology] :: VersionSource -> Text
[_repo] :: VersionSource -> Text
Webpage :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
HttpHeader :: Text -> Text -> ListOptions -> VersionSource
[_vurl] :: VersionSource -> Text
[_regex] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions
OpenVsx :: Text -> Text -> VersionSource
[_ovPublisher] :: VersionSource -> Text
[_ovExtName] :: VersionSource -> Text
VscodeMarketplace :: Text -> Text -> VersionSource
[_vsmPublisher] :: VersionSource -> Text
[_vsmExtName] :: VersionSource -> Text
Cmd :: Text -> VersionSource
[_vcmd] :: VersionSource -> Text
Container :: Text -> ListOptions -> VersionSource
[_vcontainer] :: VersionSource -> Text
[_listOptions] :: VersionSource -> ListOptions

-- | The result of nvchecker rule
data NvcheckerResult
NvcheckerResult :: Version -> Maybe Version -> Bool -> NvcheckerResult
[nvNow] :: NvcheckerResult -> Version

-- | last result of this nvchecker rule TODO: consider removing this field
[nvOld] :: NvcheckerResult -> Maybe Version

-- | stale means even <a>nvNow</a> comes from json file (last run) and we
--   actually didn't run nvchecker this time. <a>nvOld</a> will be
--   <a>Nothing</a> in this case.
[nvStale] :: NvcheckerResult -> Bool

-- | Rules of nvchecker
nvcheckerRule :: Rules ()

-- | Run nvchecker given <a>PackageKey</a> Recording version changes and
--   using stale version are available.
checkVersion :: VersionSource -> NvcheckerOptions -> PackageKey -> Action NvcheckerResult

-- | Run nvchecker without cache
checkVersion' :: VersionSource -> NvcheckerOptions -> Action NvcheckerResult


-- | This module contains a type class <a>ToNixExpr</a> and some its
--   instances associated with either Haskell primitive types or our
--   <a>NvFetcher.Types</a>.
module NvFetcher.NixExpr

-- | Nix expression
type NixExpr = Text

-- | Types can be converted into nix expr
class ToNixExpr a
toNixExpr :: ToNixExpr a => a -> NixExpr

-- | Create a trivial drv that extracts the source from a fetcher TODO:
--   Avoid using <tt>NIX_PATH</tt>
fetcherToDrv :: NixFetcher Fetched -> Text -> NixExpr
instance NvFetcher.NixExpr.ToNixExpr (NvFetcher.Types.NixFetcher 'NvFetcher.Types.Fetched)
instance NvFetcher.NixExpr.ToNixExpr GHC.Types.Bool
instance NvFetcher.NixExpr.ToNixExpr a => NvFetcher.NixExpr.ToNixExpr [a]
instance NvFetcher.NixExpr.ToNixExpr a => NvFetcher.NixExpr.ToNixExpr (GHC.Base.NonEmpty a)
instance NvFetcher.NixExpr.ToNixExpr GHC.Base.String
instance NvFetcher.NixExpr.ToNixExpr NvFetcher.Types.NixExpr
instance NvFetcher.NixExpr.ToNixExpr NvFetcher.Types.Version
instance NvFetcher.NixExpr.ToNixExpr NvFetcher.Types.PackageResult


-- | This module provides function that extracs files contents from package
--   sources. It uses <a>IFD</a> under the hood, pulling <i>textual</i>
--   files from source drv. Because we use <tt>nix-instantiate</tt> to
--   build drv, so <tt><a>nixpkgs</a></tt> (<tt>NIX_PATH</tt>) is required.
module NvFetcher.ExtractSrc

-- | Extract file contents from package source e.g. <tt>Cargo.lock</tt>
data ExtractSrcQ
ExtractSrcQ :: NixFetcher Fetched -> NonEmpty FilePath -> ExtractSrcQ

-- | Rules of extract source
extractSrcRule :: Rules ()

-- | Run extract source
extractSrc :: NixFetcher Fetched -> FilePath -> Action (HashMap FilePath Text)

-- | Run extract source with many sources
extractSrcs :: NixFetcher Fetched -> NonEmpty FilePath -> Action (HashMap FilePath Text)


-- | This module provides function to calculate <tt>cargoLock</tt> used in
--   <tt>rustPlatform.buildRustPackage</tt>.
module NvFetcher.FetchRustGitDeps

-- | Fetch <tt>outputHashes</tt> for git dependencies in
--   <tt>Cargo.lock</tt>. See
--   <a>https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file</a>
--   for details. We need fetched source and the file path to
--   <tt>Cargo.lock</tt>.
data FetchRustGitDepsQ
FetchRustGitDepsQ :: NixFetcher Fetched -> FilePath -> FetchRustGitDepsQ

-- | Rules of fetch rust git dependencies
fetchRustGitDepsRule :: Rules ()

-- | Run fetch rust git dependencies
fetchRustGitDeps :: NixFetcher Fetched -> FilePath -> Action (HashMap Text Checksum)
instance GHC.Classes.Ord NvFetcher.FetchRustGitDeps.ParsedGitSrc
instance GHC.Classes.Eq NvFetcher.FetchRustGitDeps.ParsedGitSrc
instance GHC.Show.Show NvFetcher.FetchRustGitDeps.ParsedGitSrc
instance GHC.Classes.Ord NvFetcher.FetchRustGitDeps.RustDep
instance GHC.Classes.Eq NvFetcher.FetchRustGitDeps.RustDep
instance GHC.Show.Show NvFetcher.FetchRustGitDeps.RustDep


module NvFetcher.Core

-- | The key type of nvfetcher rule. See <a>NvFetcher.Core</a>
data Core
Core :: Core

-- | The core rule of nvchecker. all rules are wired here.
coreRules :: Rules ()

-- | <a>Core</a> rule take a <a>PackageKey</a>, find the corresponding
--   <a>Package</a>, and run all needed rules to get <a>PackageResult</a>
runPackage :: PackageKey -> Action PackageResult


-- | CLI interface of nvfetcher
module NvFetcher.Options

-- | Options for nvfetcher CLI
data CLIOptions
CLIOptions :: FilePath -> Bool -> Maybe FilePath -> Int -> Int -> Bool -> Bool -> Maybe String -> Maybe FilePath -> Target -> CLIOptions
[optBuildDir] :: CLIOptions -> FilePath
[optCommit] :: CLIOptions -> Bool
[optLogPath] :: CLIOptions -> Maybe FilePath
[optThreads] :: CLIOptions -> Int
[optRetry] :: CLIOptions -> Int
[optTiming] :: CLIOptions -> Bool
[optVerbose] :: CLIOptions -> Bool
[optPkgNameFilter] :: CLIOptions -> Maybe String
[optKeyfile] :: CLIOptions -> Maybe FilePath
[optTarget] :: CLIOptions -> Target
data Target
Build :: Target
Clean :: Target
cliOptionsParser :: Parser CLIOptions

-- | Parse nvfetcher CLI options
getCLIOptions :: Parser a -> IO a
instance GHC.Classes.Eq NvFetcher.Options.Target
instance GHC.Show.Show NvFetcher.Options.CLIOptions
instance GHC.Show.Show NvFetcher.Options.Target


-- | The main module of nvfetcher. If you want to create CLI program with
--   it, it's enough to import only this module.
--   
--   Example:
--   
--   <pre>
--   module Main where
--   
--   import NvFetcher
--   
--   main :: IO ()
--   main = runNvFetcher packageSet
--   
--   packageSet :: PackageSet ()
--   packageSet = do
--     define $ package "feeluown-core" <a>fromPypi</a> "feeluown"
--     define $ package "qliveplayer" <a>fromGitHub</a> (<a>THMonster</a>, <a>QLivePlayer</a>)
--   </pre>
--   
--   You can find more examples of packages in <tt>Main_example.hs</tt>.
--   
--   Running the created program:
--   
--   <ul>
--   <li><tt>main</tt> -- abbreviation of <tt>main build</tt></li>
--   <li><tt>main build</tt> -- build nix sources expr from given
--   <tt>packageSet</tt></li>
--   <li><tt>main clean</tt> -- delete .shake dir and generated nix
--   file</li>
--   </ul>
--   
--   All shake options are inherited.
module NvFetcher

-- | Run nvfetcher with CLI options
--   
--   This function calls <a>runNvFetcherNoCLI</a>, using <a>def</a>
--   <a>Config</a> overridden by <a>CLIOptions</a>. Use this function to
--   create your own Haskell executable program.
runNvFetcher :: PackageSet () -> IO ()

-- | Similar to <a>runNvFetcher</a>, but uses custom <tt>config</tt>
--   instead of <a>def</a> overridden by <a>CLIOptions</a>
runNvFetcher' :: Config -> PackageSet () -> IO ()

-- | Entry point of nvfetcher
runNvFetcherNoCLI :: Config -> Target -> PackageSet () -> IO ()

-- | Apply <a>CLIOptions</a> to <a>Config</a>
applyCliOptions :: Config -> CLIOptions -> IO Config

-- | <pre>
--   Parse generated.nix
--   </pre>
parseLastVersions :: FilePath -> IO (Maybe (Map PackageKey Version))
